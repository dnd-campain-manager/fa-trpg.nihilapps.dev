// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid()) @db.Uuid
  name        String     @unique
  email       String?
  userType    UserType   @default(player)
  userRole    UserRole   @default(normal)
  playToken   Int        @default(0)
  playCount   Int        @default(0)
  masterPoint Int        @default(0)
  masterCount Int        @default(0)
  Auth        Auth[]
  Master      Master[]
  Document    Document[]
  Pc          Pc[]

  @@map("users")
}

model Auth {
  id           String  @id @default(uuid()) @db.Uuid
  User         User    @relation(fields: [userId], references: [id])
  userId       String  @db.Uuid
  password     String
  accessToken  String?
  refreshToken String?

  @@index([userId])
  @@map("auths")
}

model Master {
  id         String     @id @default(uuid()) @db.Uuid
  User       User       @relation(fields: [userId], references: [id])
  userId     String     @db.Uuid
  Campain    Campain    @relation(fields: [campainId], references: [id])
  campainId  String     @db.Uuid
  masterType MasterType
  Session    Session[]

  @@index([userId, campainId])
  @@map("masters")
}

model Campain {
  id        String        @id @default(uuid()) @db.Uuid
  name      String        @unique
  status    CampainStatus @default(ready)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  url       String?
  subMaster String[]
  Master    Master[]
  Session   Session[]
  Pc        Pc[]

  @@map("campains")
}

model Session {
  id            String   @id @default(uuid()) @db.Uuid
  Campain       Campain  @relation(fields: [campainId], references: [id])
  campainId     String   @db.Uuid
  Master        Master   @relation(fields: [masterId], references: [id])
  masterId      String   @db.Uuid
  number        Int
  name          String   @unique
  startTime     DateTime
  endTime       DateTime
  gameTime      String
  content       String
  playersNumber Int
  players       String[] // 유저 아이디들 넣음
  exp           Int      @default(0)
  rewardUrl     String?

  @@map("sessions")
}

model Document {
  id              String             @id @default(uuid()) @db.Uuid
  User            User               @relation(fields: [userId], references: [id])
  userId          String             @db.Uuid
  title           String
  documentType    DocumentType
  importance      DocumentImportance @default(core)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  DocumentSection DocumentSection[]

  @@map("documents")
}

model Pc {
  id           String  @id @default(uuid()) @db.Uuid
  Campain      Campain @relation(fields: [campainId], references: [id])
  campainId    String  @db.Uuid
  User         User    @relation(fields: [userId], references: [id])
  userId       String  @db.Uuid
  name         String
  age          Int?
  organization String?
  story        String?
  exp          Int     @default(0)
  pp           Int     @default(0)
  gp           Int     @default(0)
  ep           Int     @default(0)
  sp           Int     @default(0)
  cp           Int     @default(0)
  url          String
  Class        Class[]

  @@index([userId, name])
  @@map("pcs")
}

model Class {
  id        String  @id @default(uuid()) @db.Uuid
  Pc        Pc      @relation(fields: [pcId], references: [id])
  pcId      String  @db.Uuid
  className PcClass
  level     Int?

  @@index([pcId, className])
  @@map("classes")
}

model Template {
  id              String            @id @default(uuid()) @db.Uuid
  name            DocumentType
  DocumentSection DocumentSection[]

  @@map("templates")
}

model EditBlock {
  id                String          @id @default(uuid()) @db.Uuid
  name              BlockName       @default(text)
  DocumentSection   DocumentSection @relation(fields: [documentSectionId], references: [id])
  documentSectionId String          @db.Uuid
  order             Int
  text              String?
  link              String?
  alt               String?
  items             Json?
  messageColor      MessageColor?   @default(blue)
  who               String?
  headingLevel      HeadingLevel?   @default(h3)

  @@map("edit_blocks")
}

model DocumentSection {
  id         String      @id @default(uuid()) @db.Uuid
  Document   Document?   @relation(fields: [documentId], references: [id])
  documentId String?     @db.Uuid
  Template   Template?   @relation(fields: [templateId], references: [id])
  templateId String?     @db.Uuid
  order      Int
  title      String
  EditBlock  EditBlock[]

  @@map("document_sections")
}

enum HeadingLevel {
  h2
  h3
  h4
  h5
  h6
}

enum MessageColor {
  blue
  red
  yellow
  green
}

enum PcClass {
  none
  fighter
  ranger
  monk
  rogue
  paladin
  cleric
  babarian
  bard
  wizard
  druid
  sorcerer
  warlock
  artificer
}

enum DocumentType {
  god
  material
  character
  event
  organization
  nation
  race
  landscape
}

enum BlockName {
  text
  heading
  image
  orderedList
  unOrderedList
  message
  quote
}

enum CampainStatus {
  ready
  open
  close
}

enum UserType {
  player
  creator
}

enum UserRole {
  admin
  normal
}

enum MasterType {
  mainMaster
  subMaster
}

enum DocumentImportance {
  core
  side
}
