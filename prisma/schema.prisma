// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  role        UserRole  @default(PLAYER)
  playToken   Int       @default(0)
  playCount   Int       @default(0)
  email       String
  password    String
  masterPoint Int       @default(0)
  masterCount Int       @default(0)
  Pc          Pc[]
  Campain     Campain?  @relation(fields: [campainId], references: [id])
  campainId   String?   @db.Uuid
  Session     Session[]

  @@map("users")
}

model Campain {
  id        String        @id @default(uuid()) @db.Uuid
  name      String
  master    String
  subMaster String[]
  content   Json?
  status    CampainStatus @default(READY)
  infoUrl   String
  Pc        Pc[]
  Session   Session[]
  User      User[]

  @@map("campains")
}

model Pc {
  id            String  @id @default(uuid()) @db.Uuid
  User          User    @relation(fields: [userId], references: [id])
  userId        String  @db.Uuid
  Campain       Campain @relation(fields: [campainId], references: [id])
  campainId     String  @db.Uuid
  name          String
  race          String
  organization  String
  age           Int
  backStory     String
  exp           Int     @default(0)
  gold          Int     @default(0)
  isLevelUpStop Boolean @default(false)
  class1        PcClass @default(NONE)
  level1        Int     @default(1)
  class2        PcClass @default(NONE)
  level2        Int     @default(0)
  class3        PcClass @default(NONE)
  level3        Int     @default(0)
  beyondUrl     String

  @@map("pcs")
}

model Session {
  id          String      @id @default(uuid()) @db.Uuid
  Campain     Campain     @relation(fields: [campainId], references: [id])
  campainId   String      @db.Uuid
  User        User        @relation(fields: [masterId], references: [id])
  masterId    String      @db.Uuid
  number      Int
  title       String
  description Json
  type        SessionType @default(NORMAL)
  isHidden    Boolean     @default(false)
  exp         Int
  startTime   DateTime
  endTime     DateTime
  player      Int
  rewardUrl   String

  @@map("sessions")
}

enum UserRole {
  PLAYER
  MASTER
}

enum CampainStatus {
  READY
  OPEN
  CLOSE
}

enum SessionType {
  MINI
  NORMAL
  MAIN
}

enum PcClass {
  NONE
  FIGHTER
  RANGER
  MONK
  ROGUE
  PALADIN
  CLERIC
  BABARIAN
  BARD
  WIZARD
  DRUID
  SORCERER
  WARLOCK
  ARTIFICER
}
